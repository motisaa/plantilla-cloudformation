AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creacion de una instancia EC2 básica con acceso a Internet, con subred publica y privada'

Parameters:
  ImageId:
    Type: String
    Default: "ami-0c02fb55956c7d316"
    Description: "ID de la imagen AMI para la instancia EC2"
    AllowedValues:
      - "ami-0c02fb55956c7d316"  # Amazon Linux 2
      - "ami-0d8f6eb4f641ef691"  # Ubuntu Server 20.04 LTS
      - "ami-0a91cd140a1fc148a"  # Red Hat Enterprise Linux 8
    ConstraintDescription: "Debe ser una de las AMIs permitidas: Amazon Linux 2, Ubuntu Server 20.04 LTS o Red Hat Enterprise Linux 8."

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "11.0.0.0/20"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "VPCofMOTI"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: "MiIGW"

  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subred pública
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "11.0.0.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: "Name"
          Value: "MiPublicSubnet"

  # Subred privada
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "11.0.1.0/24"
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: "Name"
          Value: "MiPrivateSubnet"

  # Tabla de enrutamiento pública
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "PublicRouteTable"

  # Ruta para la subred pública
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Asociación de tabla de enrutamiento con subred pública
  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Creación de una tabla de enrutamiento privada
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: "PrivateRouteTable"

  # Crear un NAT Gateway
  NatEIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: "Name"
          Value: "MyNATGateway"

  # Ruta para la subred privada (para acceder a internet mediante el NAT Gateway)
  PrivateRoute:
    Type: "AWS::EC2::Route"
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway

  # Asociación de tabla de enrutamiento con subred privada
  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Crear el grupo de seguridad
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Grupo de seguridad para EC2'
      VPCId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'  # Permite acceso SSH desde cualquier dirección IP
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'  # Permite acceso al puerto 80 desde cualquier IP

  # Instancia EC2 en la subred pública
  EC2InstancePublic:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      KeyName: 'vockey'
      ImageId: !Ref ImageId
      SecurityGroupIds:
        - !Ref MySecurityGroup  # Referencia el grupo de seguridad
      SubnetId: !Ref PublicSubnet  # Instancia en la subred pública

  # Instancia EC2 en la subred privada
  EC2InstancePrivate:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      KeyName: 'vockey'
      ImageId: !Ref ImageId
      SecurityGroupIds:
        - !Ref MySecurityGroup 
      SubnetId: !Ref PrivateSubnet  

Outputs:
  VPCId:
    Description: "ID de la VPC"
    Value: !Ref VPC

  PublicSubnetId:
    Description: "ID de la subred pública"
    Value: !Ref PublicSubnet

  PrivateSubnetId:
    Description: "ID de la subred privada"
    Value: !Ref PrivateSubnet

  EC2InstancePublicId:
    Description: "ID de la instancia EC2 en la subred pública"
    Value: !Ref EC2InstancePublic

  EC2InstancePrivateId:
    Description: "ID de la instancia EC2 en la subred privada"
    Value: !Ref EC2InstancePrivate
